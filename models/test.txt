def visualisation_graphique():
    # Charger les données
    data = pd.read_csv("../data/merged_69.csv", sep=";")

    st.title("Visualisation des Données")

    # Choix du graphique
    st.sidebar.subheader("Choix du graphique")
    option = st.sidebar.selectbox(
        "Type de graphique:", ("Barres", "Camembert", "Lignes", "Histogramme")
    )

    # Sélection de la variable à utiliser pour la visualisation
    st.sidebar.subheader("Choisissez une variable pour visualisation")
    filter_variable = st.sidebar.selectbox(
        "Choisissez une variable:", data.columns
    )

    # Filtrer les données selon la variable choisie
    filtered_data = data[filter_variable].dropna()

    # Affichage du graphique selon le choix de l'utilisateur
    if option == "Camembert":
        fig = create_styled_pie_chart(
            filtered_data.value_counts().index,
            filtered_data.value_counts(),
        )
        st.pyplot(fig)
        if st.button("Télécharger le Camembert en PNG"):
            save_fig_as_png(fig, "camembert")

    elif option == "Barres":
        fig = create_styled_bar_chart(
            filtered_data.value_counts().index,
            filtered_data.value_counts(),
        )
        st.pyplot(fig)
        if st.button("Télécharger les Barres en PNG"):
            save_fig_as_png(fig, "barres")

    elif option == "Lignes":
        fig = create_styled_line_chart(
            filtered_data.value_counts().index,
            filtered_data.value_counts(),
        )
        st.pyplot(fig)
        if st.button("Télécharger les Lignes en PNG"):
            save_fig_as_png(fig, "lignes")

    elif option == "Histogramme":
        fig = create_styled_histogram(
            filtered_data.value_counts(),
        )
        st.pyplot(fig)
        if st.button("Télécharger l'Histogramme en PNG"):
            save_fig_as_png(fig, "histogramme")

 